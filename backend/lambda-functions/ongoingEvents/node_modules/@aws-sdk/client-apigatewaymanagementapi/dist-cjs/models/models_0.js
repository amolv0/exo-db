"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayloadTooLargeException = exports.LimitExceededException = exports.GoneException = exports.ForbiddenException = void 0;
const ApiGatewayManagementApiServiceException_1 = require("./ApiGatewayManagementApiServiceException");
class ForbiddenException extends ApiGatewayManagementApiServiceException_1.ApiGatewayManagementApiServiceException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
exports.ForbiddenException = ForbiddenException;
class GoneException extends ApiGatewayManagementApiServiceException_1.ApiGatewayManagementApiServiceException {
    constructor(opts) {
        super({
            name: "GoneException",
            $fault: "client",
            ...opts,
        });
        this.name = "GoneException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GoneException.prototype);
    }
}
exports.GoneException = GoneException;
class LimitExceededException extends ApiGatewayManagementApiServiceException_1.ApiGatewayManagementApiServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class PayloadTooLargeException extends ApiGatewayManagementApiServiceException_1.ApiGatewayManagementApiServiceException {
    constructor(opts) {
        super({
            name: "PayloadTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "PayloadTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PayloadTooLargeException.prototype);
        this.Message = opts.Message;
    }
}
exports.PayloadTooLargeException = PayloadTooLargeException;
